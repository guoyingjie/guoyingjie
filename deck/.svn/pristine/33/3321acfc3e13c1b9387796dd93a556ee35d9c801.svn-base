package com.broadeast.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.broadeast.bean.SitePriceConfigAll;
import com.broadeast.entity.PortalUser;
import com.broadeast.entity.SiteCustomerInfo;
import com.broadeast.entity.SitePaymentRecord;
import com.broadeast.entity.SitePriceConfig;
import com.broadeast.service.impl.SchoolPaymentService;
import com.broadeast.service.impl.SitePaymentRecordsService;
import com.broadeast.service.impl.SiteService;
import com.broadeast.service.impl.UserService;
import com.broadeast.service.impl.bindingBankService;
import com.broadeast.util.BigDecimalUtil;
import com.broadeast.util.DateUtil;
import com.broadeast.util.ExecuteResult;
import com.util.thirdpay.Pay;
import com.wap.demo.constant.MerchantConstant;
import com.wap.demo.domain.request.PaySignEntity;
import com.wap.demo.domain.request.WebPayReqDto;
import com.wap.demo.utils.DESUtil;
import com.wap.demo.utils.SignUtil;
/**
 * 
 * @author 宋艳彪
 *  主要处理手机端的银行卡支付
 */
@Controller
@RequestMapping("/quickPayment")
public class QuickPaymentController{

	private static Logger logger = Logger.getLogger(PayCenterController.class);

	@Autowired
	private SchoolPaymentService schoolPaymentService;
	
	@Autowired
	private SitePaymentRecordsService sitePaymentRecordsService;
	
	@Autowired
	private SiteService siteService;
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private bindingBankService bindingbankService;
	
	
	@Resource
	private MerchantConstant merchantConstant;
	
	private String errorMsg = "好像出错了<br /><p><a href='javascript:history.back(-1);'>返回</a></p>";
	/**
	 * 京东快捷支付
	 */
	@RequestMapping("/clickPayment")
	public String clickPayment(@RequestParam String nums,@RequestParam String amount,@RequestParam String price_num,
			@RequestParam String price_name,@RequestParam String priceConfig,HttpServletRequest request,HttpServletResponse response) throws Exception{
		String version="2.0";
		//用户交易令牌
		String token="";
		//商户号
		String merchantNum=merchantConstant.getMerchantNum();
		//支付成功 商户展示地址
		String successCallbackUrl=merchantConstant.getSuccessCallbackUrl();
		 //支付失败 商户展示地址
		String failCallbackUrl= merchantConstant.getFailCallbackUrl();
		//接收异步通知地址
		String notifyUrl= merchantConstant.getNotifyUrl();
		//网银支付服务地址
		String serverUrl= merchantConstant.getWangyinServerPayUrl();
		//货币种类
		String currency="CNY";
		//交易金额
		BigDecimal tradeAmount=BigDecimalUtil.multiply(new BigDecimal(amount), 100);
		int tAmount=tradeAmount.intValue();
		Map<String ,String>map=new HashMap<String,String>();
		PortalUser user=(PortalUser) request.getSession().getAttribute("proUser");//拿到当前的用户信息
		SitePriceConfigAll siteConfigAll=(SitePriceConfigAll) request.getSession().getAttribute("siteAll");//拿到当前的场所的消费规则
		if(user==null||siteConfigAll==null){
			return this.errorMsg;
		}
		//抽取必填参数
		 price_name = new String(request.getParameter("price_name"));
		map.put("userId",user.getId()+"");//用户Id
		map.put("storeId",siteConfigAll.getSiteInof().getId()+"");//场所Id
		map.put("tenantId", siteConfigAll.getSiteInof().getUser_id()+"");//商户id
		map.put("payType",priceConfig);//场所收费配置Id
		map.put("buyNum",nums);//购买数量
		map.put("amount",amount);//总金额
		map.put("priceNum", price_num);//套餐
		map.put("priceName", price_name);//套餐
		String giveNum=request.getParameter("addMealNum");//赠送的套餐数量
		String giveUnit=request.getParameter("addMealUnit");//赠送的套餐单位
		map.put("addMealNum",giveNum);
		map.put("addMealUnit",giveUnit);
		map.put("mealType",request.getParameter("mealType"));//选择的套餐类型 1----时间，2-----流量
		//校验
		String checkResult=schoolPaymentService.paramsCheck(map);
		if("ok".equals(checkResult)){//校验通过
			
			SitePriceConfig scf=siteService.getSitePriceInfos(siteConfigAll.getSiteInof().getId(),Integer.parseInt(map.get("payType")));
			//日期加减 0按小时收费；1按天;2按月
			
			
			//根据和当前时间的比较计算到期时间
			PortalUser pu =(PortalUser) request.getSession().getAttribute("proUser");
			SiteCustomerInfo scii =siteService.getExpirationTimeByProuserid(pu.getId(),siteConfigAll.getSiteInof().getId());
			//计算用户到期时间或者流量
			String riqi=siteService.getUserCustomer(scii, scf, map);
			if("1".equals(map.get("mealType"))){//用户购买的是时间套餐
				map.put("expireDate",riqi);
			}else{
				map.put("expireFlow",riqi);
			}
			//订单号
			String out_trade_no=Pay.getUuidOrderNumFromUserId(map.get("userId"));
			//场所名称
			String siteName=siteService.getSiteName(siteConfigAll.getSiteInof().getId());

			//交易名称
			String subject = "校园卡会员充值,按"+map.get("priceName")+"充值("+siteName+")";
			//交易时间
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			 String tradeTime=sdf.format(new Date());
			 //给token赋值
			String listToken= sitePaymentRecordsService.selToken(user.getId());
			 if(listToken!=null){
				 token=listToken;
			 }
			//保存支付信息
			schoolPaymentService.savePaymentinfo(out_trade_no,map,2);
			WebPayReqDto webPayReqDto=getWebPayReqDto(version, serverUrl,token,merchantNum, out_trade_no, subject, tradeTime, String.valueOf(tAmount), currency, notifyUrl, successCallbackUrl,failCallbackUrl);
		  	PaySignEntity wePayMerchantSignReqDTO = new PaySignEntity();
	        wePayMerchantSignReqDTO.setVersion(webPayReqDto.getVersion());
	        wePayMerchantSignReqDTO.setToken(webPayReqDto.getToken());
	        wePayMerchantSignReqDTO.setMerchantNum(webPayReqDto.getMerchantNum());
	        wePayMerchantSignReqDTO.setTradeNum(webPayReqDto.getTradeNum());
	        wePayMerchantSignReqDTO.setTradeTime(webPayReqDto.getTradeTime());
	        wePayMerchantSignReqDTO.setTradeName(webPayReqDto.getTradeName());
	        wePayMerchantSignReqDTO.setCurrency(webPayReqDto.getCurrency());
	        wePayMerchantSignReqDTO.setMerchantRemark(webPayReqDto.getMerchantRemark());
	        wePayMerchantSignReqDTO.setTradeAmount(webPayReqDto.getTradeAmount());
	        wePayMerchantSignReqDTO.setTradeDescription(webPayReqDto.getTradeDescription());
	        wePayMerchantSignReqDTO.setSuccessCallbackUrl(webPayReqDto.getSuccessCallbackUrl());
	        wePayMerchantSignReqDTO.setFailCallbackUrl(webPayReqDto.getFailCallbackUrl());
	        wePayMerchantSignReqDTO.setNotifyUrl(webPayReqDto.getNotifyUrl());

	        /**
	         * 商户签名
	         */
	        String signStr = SignUtil.sign(wePayMerchantSignReqDTO, merchantConstant.getPayRSAPrivateKey());
	        webPayReqDto.setMerchantSign(signStr);

	        if ("1.0".equals(webPayReqDto.getVersion())) {
	            //敏感信息未加密
	        } else if ("2.0".equals(webPayReqDto.getVersion())) {
	            //敏感信息加密
	            try {
	                //获取商户 DESkey
	                String desKey = merchantConstant.getMerchantDESKey();
	                //对敏感信息进行 DES加密
	                webPayReqDto.setTradeNum(DESUtil.encrypt(webPayReqDto.getTradeNum(), desKey, "UTF-8"));
	                webPayReqDto.setTradeName(DESUtil.encrypt(webPayReqDto.getTradeName(), desKey, "UTF-8"));
	                webPayReqDto.setTradeTime(DESUtil.encrypt(webPayReqDto.getTradeTime(), desKey, "UTF-8"));
	                webPayReqDto.setTradeAmount(DESUtil.encrypt(webPayReqDto.getTradeAmount(), desKey, "UTF-8"));
	                webPayReqDto.setCurrency(DESUtil.encrypt(webPayReqDto.getCurrency(), desKey, "UTF-8"));
	                webPayReqDto.setNotifyUrl(DESUtil.encrypt(webPayReqDto.getNotifyUrl(), desKey, "UTF-8"));
	                webPayReqDto.setSuccessCallbackUrl(DESUtil.encrypt(webPayReqDto.getSuccessCallbackUrl(), desKey, "UTF-8"));
	                webPayReqDto.setFailCallbackUrl(DESUtil.encrypt(webPayReqDto.getFailCallbackUrl(), desKey, "UTF-8"));
	            } catch (Exception e) {
	                e.printStackTrace();
	            }
	        }

	        request.setAttribute("tradeAmount", wePayMerchantSignReqDTO.getTradeAmount());
	        request.setAttribute("tradeName", wePayMerchantSignReqDTO.getTradeName());
	        request.setAttribute("serverUrl", webPayReqDto.getServerUrl());
	        request.setAttribute("tradeInfo", webPayReqDto);
	        return "mobile/paySubmit";
		}else{//校验不通过
			return this.errorMsg;
		}
	}
	 
	/**
	 * 获得前台输入参数
	 * @param version
	 * @param serverUrl
	 * @param token
	 * @param merchantNum
	 * @param tradeNum
	 * @param tradeName
	 * @param tradeTime
	 * @param tradeAmount
	 * @param currency
	 * @param notifyUrl
	 * @param successCallbackUrl
	 * @param failCallbackUrl
	 * @return
	 */
	   public WebPayReqDto getWebPayReqDto(String version,String serverUrl,String token,
			   String merchantNum,String tradeNum,String tradeName, String tradeTime,String tradeAmount, 
			   String currency,String notifyUrl,String successCallbackUrl,String failCallbackUrl){
		   	WebPayReqDto webPayReqDto=new WebPayReqDto();
		   	webPayReqDto.setVersion(version);
		   	webPayReqDto.setServerUrl(serverUrl);
		   	webPayReqDto.setToken(token);
		   	webPayReqDto.setMerchantNum(merchantNum);
		   	webPayReqDto.setTradeNum(tradeNum);
		   	webPayReqDto.setTradeName(tradeName);
		   	webPayReqDto.setTradeTime(tradeTime);
		   	webPayReqDto.setTradeAmount(tradeAmount);
		   	webPayReqDto.setCurrency(currency);
		   	webPayReqDto.setNotifyUrl(notifyUrl);
		   	webPayReqDto.setSuccessCallbackUrl(successCallbackUrl);
		   	webPayReqDto.setFailCallbackUrl(failCallbackUrl);
		   return webPayReqDto;
	   } 
	   /**
		 * 京东支付异步通知
		 * @param request
		 * @param response
		 */
		@RequestMapping("/payNotify")
		public void payNotify(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException{
			try {
				bindingbankService.jdNotify(request, response);
				return;
	        }catch (Exception e) {
	        	logger.error("支付结果通知接口异常。", e);
	            try {
	            	PrintWriter out = response.getWriter();
		            out.write("fail");
	            }catch (IOException e1) {
		            e1.printStackTrace();
	            }
	        }
		} 
	
		/**
		 * 根据out_trade_no校验支付是否完成
		 * @param out_trade_no
		 * @param session
		 * @return
		 */
		@RequestMapping("/checkPayResult")
		@ResponseBody
		public String checkPayResult(@RequestParam String orderNum,HttpSession session){
			ExecuteResult rs=new ExecuteResult();
			PortalUser user=(PortalUser) session.getAttribute("proUser");//添加用户到session
			SitePriceConfigAll siteConfigAll=(SitePriceConfigAll) session.getAttribute("siteAll");//添加场所所有收费规则session
			
			SitePaymentRecord spr=sitePaymentRecordsService.getSitePaymentRecordByTradeNum(orderNum,siteConfigAll.getSiteInof().getId(), user.getId());
			if(spr!=null&&spr.getIsFinish()==1){
				rs.setCode(200);
				sitePaymentRecordsService.updateIsFinish(orderNum);
			}else{
				rs.setCode(201);
				rs.setMsg("支付未完成或状态未同步。");
			}
			
			return rs.toJsonString();
		}
		/**
		 * 添加用户的交易
		 * @param token
		 * @param session
		 */
		@RequestMapping("/saveToken")
		public void saveToken(@RequestParam String token,HttpSession session){
			PortalUser user=(PortalUser) session.getAttribute("proUser");//添加用户到session
			sitePaymentRecordsService.insertToken(token,user.getId());
			
		}
		
}